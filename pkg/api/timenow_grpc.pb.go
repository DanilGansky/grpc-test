// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimenowServiceClient is the client API for TimenowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimenowServiceClient interface {
	Now(ctx context.Context, in *TimenowRequest, opts ...grpc.CallOption) (*TimenowResponse, error)
}

type timenowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimenowServiceClient(cc grpc.ClientConnInterface) TimenowServiceClient {
	return &timenowServiceClient{cc}
}

func (c *timenowServiceClient) Now(ctx context.Context, in *TimenowRequest, opts ...grpc.CallOption) (*TimenowResponse, error) {
	out := new(TimenowResponse)
	err := c.cc.Invoke(ctx, "/api.TimenowService/Now", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimenowServiceServer is the server API for TimenowService service.
// All implementations must embed UnimplementedTimenowServiceServer
// for forward compatibility
type TimenowServiceServer interface {
	Now(context.Context, *TimenowRequest) (*TimenowResponse, error)
}

// UnsafeTimenowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimenowServiceServer will
// result in compilation errors.
type UnsafeTimenowServiceServer interface {
	mustEmbedUnimplementedTimenowServiceServer()
}

func RegisterTimenowServiceServer(s grpc.ServiceRegistrar, srv TimenowServiceServer) {
	s.RegisterService(&TimenowService_ServiceDesc, srv)
}

func _TimenowService_Now_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimenowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimenowServiceServer).Now(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TimenowService/Now",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimenowServiceServer).Now(ctx, req.(*TimenowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimenowService_ServiceDesc is the grpc.ServiceDesc for TimenowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimenowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.TimenowService",
	HandlerType: (*TimenowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Now",
			Handler:    _TimenowService_Now_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timenow/proto/timenow.proto",
}
